#!/usr/bin/ruby
#
# usage: mmin [root-dir]
#
# * creates Makefile system for minerva builds
# * refresh dependencies

#require 'fileutils'

$root="/home/jan/q68/m"
$libs=[]
$subdirs=[]
$cleans=[]
$deps=Hash.new

if ARGV.length>0
  $root=ARGV[0]
end

# name wo sfx, may need to try ./_/caps
def mkdeps(obj)
  ldeps=[]
  File.open(obj+"_asm").each{|line|
    line.chomp!
    #p line
    line.encode!('UTF-8', 'binary', invalid: :replace, undef: :replace, replace: '')
    #printf "    # %s\n",line
    case line
    #when /\s*include\s+win1_mincf/i
    #  ldeps<<"mincf"
    when /\s+include\s+'win1_m_(.*)'/i
      ldeps<<$1
    end
  }
  #printf "\n\nmkdeps:\n"
  #p obj
  #p ldeps
  return ldeps
end

def glob_list(list)
#  return list.split(" ,").collect{|el| Dir.glob(el)}
  return list.split(/[ ,]/).collect{|el| 
    Dir.glob(el)}.flatten
end


Dir.chdir $root
File.open("ROM/link").each{|line|
  line.chomp!
  if /input win1_m_(.*)_lib/ =~ line
    $subdirs<<$1
    $libs<<($1+"/lib")
  else
    printf "unexpected line %s\n",line
    exit 1
  end
}
#p $subdirs
#p $libs


# main Makefile
File.open("Makefile","w"){|mkf|
  mkf.printf "# WARNING: automatically generated file - do not edit!\n\n"
  mkf.printf "# - generated by 'mmake' %s\n\n",Time.now

  #mkf.printf "AS=ccc1_qmac\n"
  #mkf.printf "AS_OPTS=\n\n"
  
  #mkf.printf "LD=ccc1_qlink\n"
  #mkf.printf "LD_OPTS=\n\n"

  #mkf.printf "CC=cc1_qmac\n\n"

  #mkf.printf "_asm_rel:\n"
  #mkf.printf "\t $(AS) $*_asm -BIN $*_rel \n\n"
  
  # don't mention mincf, hwdef and other includes: autogenerated
  mkf.printf "all: minerva_rom\n\n"
  mkf.printf "minerva_rom: %s\n",$libs.join(" ")
  mkf.printf "\t qlink -WITH win1_m_ROM -PROG win1_m_minerva_rom \n\n"

  ###########################
  $subdirs.each{|dir|
    objs=[]
    sdeps=Hash.new
    Dir.chdir dir
    File.open("cct").each{|line|
      line.chomp!
      if /win1_m_(.*)_(.*)_rel/i =~ line
        objs<<$2+"_rel"
        $cleans<<dir+"_"+$2+"_rel"
        sdeps[$2]=mkdeps $2
      end
    }
    $cleans<<dir+"_"+dir+"_lib"
    #File.open("Makefile","w"){|mkf|
    mkf.printf "# Subdir : %s\n\n",dir
      
    mkf.printf "%s/lib: %s_%s\n",dir, dir, objs.join(" "+dir+"_")
    mkf.printf "\t fcat %s_lib  %s_%s  \n\n", dir, dir,objs.join(" "+dir+"_")
      
    sdeps.each{|k,v|
      # not yet mincf
      mkf.printf "%s_%s_rel: %s_%s_asm  %s\n",dir,k,dir,k,v.map{|v| "win1_m_"+v}.join(" ")
      #mkf.printf "\t qmac %s_%s_asm \n\n",dir,k
      ### brain damaged QMAC will generate _rel file despite of errors, on the next
      ### run of make this would be picked up as a valid result. Instead assemble to
      ### temporary file and cp to dest if no error
      mkf.printf "\t qmac %s_%s_asm -BIN %s_%s_temp_rel\n",dir,k, dir,k
      mkf.printf "\t cp %s_%s_temp_rel %s_%s_rel\n\n",dir,k, dir,k
    }
    #mkf.printf "%s.rel: win1_m_mincf %s\n\n",k,v.map{|v| "win1_m_inc_"+v}.join(" ")}
    #p sdeps
 
    $deps.merge! sdeps
    Dir.chdir ".."
  }

  ##########################

  mkf.printf "clean:\n"
  mkf.printf "\trm -f minerva_rom \n",$cleans.join(" ")
  $subdirs.each{|dir|
    mkf.printf "\trm -f %s_*_REL %s_LIB\n",dir,dir
  }
  mkf.printf "\n"
  #mkf.printf "\trm minerva_rom %s\n\n",$cleans.join(" ")

}

